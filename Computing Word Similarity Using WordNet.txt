#Computing Word Similarity Using WordNet

import nltk
from nltk.corpus import wordnet as wn

# Ensure you've downloaded WordNet
nltk.download('wordnet') 

def path_similarity(word1, word2):
    synsets1 = wn.synsets(word1)
    synsets2 = wn.synsets(word2)
    if synsets1 and synsets2:  
        best_path = min((len(s1.shortest_path_distance(s2)) 
                          for s1 in synsets1 for s2 in synsets2), 
                          default=None)  
        return 1 / (best_path + 1) if best_path else 0 
    else: 
        return 0 

def wup_similarity(word1, word2):
    synsets1 = wn.synsets(word1)
    synsets2 = wn.synsets(word2)
    if synsets1 and synsets2:
        best_lcs = max((s1.wup_similarity(s2) 
                         for s1 in synsets1 for s2 in synsets2), 
                         default=0) 
        return best_lcs
    else:
        return 0

# Example Usage 
word1 = "dog"
word2 = "cat" 

path_sim = path_similarity(word1, word2)
wup_sim = wup_similarity(word1, word2)

print("Path Similarity:", path_sim)
print("Wu-Palmer Similarity:", wup_sim)
